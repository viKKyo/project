import tkinter
from tkinter import *
from tkinter import messagebox
import glob
import os
import datetime
import string
import random
from datetime import date, timedelta

#Funkar inte att spara variabel.

class SeaofBTCapp(tkinter.Tk):

    def __init__(self, *args, **kwargs):
        tkinter.Tk.__init__(self, *args, **kwargs)

        tkinter.Tk.wm_title(self, "IT-forensik Projekt")

        container = tkinter.Frame(self)
        container.pack(side="top", fill="both", expand = True)
        container.grid_rowconfigure(0, weight=1)
        container.grid_columnconfigure(0, weight=1)

        self.frame = {}
        for F in (StartPage, PageOne, TestPage):
            frame = F(container, self)
            self.frame[F] = frame
            frame.grid(row=0, column=0, sticky="nsew")

        self.show_frame(StartPage)


    def show_frame(self, cont):

        frame = self.frame[cont]
        frame.tkraise()


class StartPage(tkinter.Frame):

    def __init__(self, parent, controller):
        #parent class(SeaofBTCapp is the main class)
        tkinter.Frame.__init__(self, parent)


        self.label =tkinter.Label(self, text="Start Page", fg='red', font = "helvetica 16 bold italic")
        self.label.grid(row=0, column=2 ,columnspan=2, sticky='EWNS')


        self.button = tkinter.Button(self, text="visit page 1", fg='red', bg='black',
                                 command=lambda: controller.show_frame(PageOne))
        self.button.grid(row=1, column=2 ,columnspan=1, sticky='EWNS')


        self.label2 = tkinter.Label(self, text="Extrauppgifter", font="helvetica 12 bold italic")
        self.label2.grid(row=3, column=2 ,columnspan=2, sticky='EWNS')

        self.button1 = tkinter.Button(self, text="visit page 2",
                                command=lambda: controller.show_frame(TestPage))
        self.button1.grid(row=2, column=2 ,columnspan=1, sticky='EWNS')

        self.button7 = tkinter.Button(self, text="visit page 7",
                                command=lambda: controller.show_frame(PageOne))
        self.button7.grid(row=2, column=5 ,columnspan=1, sticky='EWNS')


class TestPage(tkinter.Frame):

    def __init__(self, parent, controller):
        tkinter.Frame.__init__(self, parent)

        self.label = tkinter.Label(self, text="TestPage", font=("bold 15"))
        self.label.pack(pady=10, padx=10)

        self.entry = tkinter.Entry(self, width=70)
        self.entry.pack(pady=10, padx=10)
        self.button1 = tkinter.Button(self, text="Startpage",
                                 command=lambda: controller.show_frame(StartPage))
        self.button1.pack()

class PageOne(tkinter.Frame):
    def __init__(self, parent, controller):
        tkinter.Frame.__init__(self, parent)

        self.input_label = tkinter.Label(self,
                                         text = "Enter the yes for path or type no for entire hardrive:")   #Function 1 for the If Statement.
        self.input_entry = tkinter.Entry(self,
                                         width = 25)
        self.folder_label = tkinter.Label(self,
                                          text = "Input path or drive you want to search >>>")              #Path or hardrive selection for function 1.
        self.folder_entry = tkinter.Entry(self,
                                          width = 25)


        
        self.input_label.grid(row = 1, column = 1, columnspan = 2, sticky = "EWNS")                         #Fucntion 1.
        self.input_entry.grid(row = 1, column = 3, columnspan = 2, sticky = "EWNS")

        self.folder_label.grid(row = 2, column = 1, columnspan = 2, sticky = "EWNS")                        #F1
        self.folder_entry.grid(row = 2, column = 4, columnspan = 2, sticky = "EWNS")



        self.result_label = tkinter.Label(self,
                                          text = "Results: ")                                               #Results from function 1.
        self.value = tkinter.StringVar()
        self.value_label = tkinter.Label(self,
                                         textvariable = self.value)                                         #Create the list_of_paths & results from F1.

        self.result_label.grid(row = 4, column = 1, columnspan = 1, sticky = "EWNS")                        #F1
        self.value_label.grid(row = 4, column = 2, columnspan = 2, sticky = "EWNS")

        self.result_button = tkinter.Button(self,
                                            text = "Search",
                                            command = self.comp_search)                                     #Button F1

        self.button = tkinter.Button(self, text="Go to the start page",
                           command=lambda: controller.show_frame(StartPage))                                #Return Button.

        self.result_button.grid(row = 3, column = 2, columnspan = 1, sticky = "EWNS")                       #F1
        self.button.grid(row = 3, column = 1, columnspan = 1, sticky = "EWNS")                              #Return Button.


    def comp_search(self):
        where = self.input_entry.get()

        if where.lower() in ["y", "ye", "yes", "", " "]:
            folder = self.folder_entry.get()
            folder_list = []
            for name in glob.glob(folder + "\\**", recursive=True):
                folder_list.append(name)
            self.value.set(folder_list)
        elif where.lower() in ["n", "no", "noo"]:
            drive = self.folder_entry.get()
            drive_list = []
            for name in glob.glob(drive.lower() + "\\**", recursive=True):
                drive_list.append(name)
            self.value.set(drive_list)
        else:
            pass

app = SeaofBTCapp()
app.mainloop()

#Printar iaf resultaten men sparar ingen list vilket behövs för resterande functioner.

class SeaofBTCapp(tkinter.Tk):

    def __init__(self, *args, **kwargs):
        tkinter.Tk.__init__(self, *args, **kwargs)

        tkinter.Tk.wm_title(self, "IT-forensik Projekt")

        container = tkinter.Frame(self)
        container.pack(side="top", fill="both", expand = True)
        container.grid_rowconfigure(0, weight=1)
        container.grid_columnconfigure(0, weight=1)

        self.frame = {}
        for F in (StartPage, PageOne, TestPage):
            frame = F(container, self)
            self.frame[F] = frame
            frame.grid(row=0, column=0, sticky="nsew")

        self.show_frame(StartPage)


    def show_frame(self, cont):

        frame = self.frame[cont]
        frame.tkraise()


class StartPage(tkinter.Frame):

    def __init__(self, parent, controller):
        #parent class(SeaofBTCapp is the main class)
        tkinter.Frame.__init__(self, parent)


        self.label =tkinter.Label(self, text="Start Page", fg='red', font = "helvetica 16 bold italic")
        self.label.grid(row=0, column=2 ,columnspan=2, sticky='EWNS')


        self.button = tkinter.Button(self, text="visit page 1", fg='red', bg='black',
                                 command=lambda: controller.show_frame(PageOne))
        self.button.grid(row=1, column=2 ,columnspan=1, sticky='EWNS')


        self.label2 = tkinter.Label(self, text="Extrauppgifter", font="helvetica 12 bold italic")
        self.label2.grid(row=3, column=2 ,columnspan=2, sticky='EWNS')

        self.button1 = tkinter.Button(self, text="visit page 2",
                                command=lambda: controller.show_frame(TestPage))
        self.button1.grid(row=2, column=2 ,columnspan=1, sticky='EWNS')

        self.button7 = tkinter.Button(self, text="visit page 7",
                                command=lambda: controller.show_frame(PageOne))
        self.button7.grid(row=2, column=5 ,columnspan=1, sticky='EWNS')


class TestPage(tkinter.Frame):

    def __init__(self, parent, controller):
        tkinter.Frame.__init__(self, parent)

        self.label = tkinter.Label(self, text="TestPage", font=("bold 15"))
        self.label.pack(pady=10, padx=10)

        self.entry = tkinter.Entry(self, width=70)
        self.entry.pack(pady=10, padx=10)
        self.button1 = tkinter.Button(self, text="Startpage",
                                 command=lambda: controller.show_frame(StartPage))
        self.button1.pack()

class PageOne(tkinter.Frame):
    def __init__(self, parent, controller):
        tkinter.Frame.__init__(self, parent)

        self.input_label = tkinter.Label(self,
                                         text = "Enter the yes for path or type no for entire hardrive:")   #Function 1 for the If Statement.
        self.input_entry = tkinter.Entry(self,
                                         width = 25)
        self.folder_label = tkinter.Label(self,
                                          text = "Input path or drive you want to search >>>")              #Path or hardrive selection for function 1.
        self.folder_entry = tkinter.Entry(self,
                                          width = 25)


        
        self.input_label.grid(row = 1, column = 1, columnspan = 2, sticky = "EWNS")                         #Fucntion 1.
        self.input_entry.grid(row = 1, column = 3, columnspan = 2, sticky = "EWNS")

        self.folder_label.grid(row = 2, column = 1, columnspan = 2, sticky = "EWNS")                        #F1
        self.folder_entry.grid(row = 2, column = 4, columnspan = 2, sticky = "EWNS")


        self.result_button = tkinter.Button(self,
                                            text = "Search",
                                            command = self.comp_search)                                     #Button F1

        self.button = tkinter.Button(self, text="Go to the start page",
                           command=lambda: controller.show_frame(StartPage))                                #Return Button.

        self.result_button.grid(row = 3, column = 2, columnspan = 1, sticky = "EWNS")                       #F1
        self.button.grid(row = 3, column = 1, columnspan = 1, sticky = "EWNS")                              #Return Button.


    def comp_search(self):
        where = self.input_entry.get()

        if where.lower() in ["y", "ye", "yes", "", " "]:
            folder = self.folder_entry.get()
            folder_list = []
            for name in glob.glob(folder + "\\**", recursive=True):
                folder_list.append(name)
            tkinter.messagebox.showinfo("List of paths:/n",
                                        folder_list)
        elif where.lower() in ["n", "no", "noo"]:
            drive = self.folder_entry.get()
            drive_list = []
            for name in glob.glob(drive.lower() + "\\**", recursive=True):
                drive_list.append(name)
            tkinter.messagebox.showinfo("List of paths:/n",
                                        drive_list)
        else:
            pass

app = SeaofBTCapp()
app.mainloop()

